#!/bin/bash\n\n# JoyAgent Document Analysis - Integration Test Script\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m'\n\nprint_status() {\n    echo -e \"${BLUE}[TEST]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[PASS]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[FAIL]${NC} $1\"\n}\n\n# Test service health\ntest_service_health() {\n    print_status \"Testing service health endpoints...\"\n    \n    # Test document analysis service\n    if curl -s http://localhost:8188/health | grep -q \"healthy\"; then\n        print_success \"Document Analysis Service is healthy\"\n    else\n        print_error \"Document Analysis Service health check failed\"\n        return 1\n    fi\n    \n    # Test supported formats endpoint\n    if curl -s http://localhost:8188/v1/document/supported-formats | grep -q \"supported_formats\"; then\n        print_success \"Supported formats endpoint working\"\n    else\n        print_error \"Supported formats endpoint failed\"\n        return 1\n    fi\n    \n    return 0\n}\n\n# Test file upload functionality\ntest_file_upload() {\n    print_status \"Testing file upload functionality...\"\n    \n    # Create a test text file\n    local test_file=\"test_document.txt\"\n    echo \"This is a test document for JoyAgent document analysis.\" > \"$test_file\"\n    echo \"It contains sample text to verify the document processing pipeline.\" >> \"$test_file\"\n    echo \"Financial metrics: Revenue increased by 15% this quarter.\" >> \"$test_file\"\n    echo \"Risk factors: Market volatility remains a concern.\" >> \"$test_file\"\n    \n    # Test document analysis\n    local response=$(curl -s -X POST \"http://localhost:8188/v1/document/analyze\" \\\n        -F \"query=Summarize this document and identify key metrics\" \\\n        -F \"session_id=test_session_123\" \\\n        -F \"analysis_type=financial\" \\\n        -F \"files=@$test_file\")\n    \n    # Check if response contains expected fields\n    if echo \"$response\" | grep -q \"code.*200\"; then\n        print_success \"Document analysis API working\"\n    else\n        print_error \"Document analysis API failed\"\n        echo \"Response: $response\"\n        rm -f \"$test_file\"\n        return 1\n    fi\n    \n    # Clean up\n    rm -f \"$test_file\"\n    return 0\n}\n\n# Test environment configuration\ntest_environment() {\n    print_status \"Testing environment configuration...\"\n    \n    # Check if .env file exists\n    if [ ! -f \".env\" ]; then\n        print_error \"No .env file found\"\n        return 1\n    fi\n    \n    # Source environment variables\n    export $(cat .env | grep -v '^#' | xargs 2>/dev/null)\n    \n    # Check DASHSCOPE_API_KEY\n    if [ -z \"$DASHSCOPE_API_KEY\" ] || [ \"$DASHSCOPE_API_KEY\" = \"your_dashscope_api_key_here\" ]; then\n        print_error \"DASHSCOPE_API_KEY not properly configured\"\n        return 1\n    else\n        print_success \"DASHSCOPE_API_KEY is configured\"\n    fi\n    \n    # Check upload directory\n    if [ -d \"uploads\" ]; then\n        print_success \"Upload directory exists\"\n    else\n        print_error \"Upload directory missing\"\n        return 1\n    fi\n    \n    return 0\n}\n\n# Test Python dependencies\ntest_python_dependencies() {\n    print_status \"Testing Python dependencies...\"\n    \n    cd genie-client\n    \n    # Activate virtual environment if it exists\n    if [ -d \".venv\" ]; then\n        source .venv/bin/activate\n    fi\n    \n    # Test imports\n    if python -c \"import fastapi, httpx, aiofiles, PyPDF2, docx, pandas\" 2>/dev/null; then\n        print_success \"All Python dependencies are available\"\n    else\n        print_error \"Some Python dependencies are missing\"\n        cd ..\n        return 1\n    fi\n    \n    cd ..\n    return 0\n}\n\n# Test Java tool integration\ntest_java_integration() {\n    print_status \"Testing Java tool integration...\"\n    \n    # Check if DocumentAnalyzerTool.java exists\n    local tool_file=\"genie-backend/src/main/java/com/jd/genie/agent/tool/common/DocumentAnalyzerTool.java\"\n    if [ -f \"$tool_file\" ]; then\n        print_success \"DocumentAnalyzerTool.java exists\"\n    else\n        print_error \"DocumentAnalyzerTool.java not found\"\n        return 1\n    fi\n    \n    return 0\n}\n\n# Test React component\ntest_react_component() {\n    print_status \"Testing React component...\"\n    \n    # Check if DocumentAnalyzer.tsx exists\n    local component_file=\"ui/src/components/DocumentAnalyzer.tsx\"\n    if [ -f \"$component_file\" ]; then\n        print_success \"DocumentAnalyzer.tsx component exists\"\n    else\n        print_error \"DocumentAnalyzer.tsx component not found\"\n        return 1\n    fi\n    \n    return 0\n}\n\n# Main test function\nrun_tests() {\n    print_status \"Starting JoyAgent Document Analysis Integration Tests...\"\n    echo \"\"\n    \n    local failed_tests=0\n    \n    # Test environment\n    if ! test_environment; then\n        failed_tests=$((failed_tests + 1))\n    fi\n    echo \"\"\n    \n    # Test Python dependencies\n    if ! test_python_dependencies; then\n        failed_tests=$((failed_tests + 1))\n    fi\n    echo \"\"\n    \n    # Test Java integration\n    if ! test_java_integration; then\n        failed_tests=$((failed_tests + 1))\n    fi\n    echo \"\"\n    \n    # Test React component\n    if ! test_react_component; then\n        failed_tests=$((failed_tests + 1))\n    fi\n    echo \"\"\n    \n    # Test service health (only if services are running)\n    if curl -s http://localhost:8188/health >/dev/null 2>&1; then\n        if ! test_service_health; then\n            failed_tests=$((failed_tests + 1))\n        fi\n        echo \"\"\n        \n        # Test file upload (only if service is healthy)\n        if ! test_file_upload; then\n            failed_tests=$((failed_tests + 1))\n        fi\n        echo \"\"\n    else\n        print_status \"Services not running - skipping runtime tests\"\n        print_status \"Start services with ./start_genie_with_documents.sh to run full tests\"\n        echo \"\"\n    fi\n    \n    # Summary\n    if [ $failed_tests -eq 0 ]; then\n        print_success \"üéâ All tests passed! Document analysis integration is ready.\"\n        echo \"\"\n        echo \"Next steps:\"\n        echo \"1. Start services: ./start_genie_with_documents.sh\"\n        echo \"2. Open browser: http://localhost:3000\"\n        echo \"3. Upload documents and test analysis\"\n    else\n        print_error \"‚ùå $failed_tests test(s) failed. Please check the setup.\"\n        echo \"\"\n        echo \"Common fixes:\"\n        echo \"1. Install dependencies: ./start_genie_with_documents.sh --install-deps\"\n        echo \"2. Configure .env file with DASHSCOPE_API_KEY\"\n        echo \"3. Ensure all required services are accessible\"\n    fi\n    \n    return $failed_tests\n}\n\n# Handle command line arguments\ncase \"$1\" in\n    --help|-h)\n        echo \"JoyAgent Document Analysis Integration Test Script\"\n        echo \"\"\n        echo \"Usage: $0 [OPTIONS]\"\n        echo \"\"\n        echo \"Options:\"\n        echo \"  --help, -h          Show this help message\"\n        echo \"\"\n        echo \"This script tests:\"\n        echo \"  ‚Ä¢ Environment configuration\"\n        echo \"  ‚Ä¢ Python dependencies\"\n        echo \"  ‚Ä¢ Java tool integration\"\n        echo \"  ‚Ä¢ React component presence\"\n        echo \"  ‚Ä¢ Service health (if running)\"\n        echo \"  ‚Ä¢ Document analysis API (if running)\"\n        echo \"\"\n        exit 0\n        ;;\n    *)\n        run_tests\n        exit $?\n        ;;\nesac