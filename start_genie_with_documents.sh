#!/bin/bash

# JoyAgent with Document Analysis - Startup Script\n# This script starts all components of the JoyAgent system including the new document analysis feature\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[JoyAgent]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Function to check if a port is in use\ncheck_port() {\n    local port=$1\n    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# Function to wait for service to be ready\nwait_for_service() {\n    local url=$1\n    local service_name=$2\n    local max_attempts=30\n    local attempt=1\n    \n    print_status \"Waiting for $service_name to be ready...\"\n    \n    while [ $attempt -le $max_attempts ]; do\n        if curl -s $url >/dev/null 2>&1; then\n            print_success \"$service_name is ready!\"\n            return 0\n        fi\n        sleep 2\n        attempt=$((attempt + 1))\n    done\n    \n    print_error \"$service_name failed to start within expected time\"\n    return 1\n}\n\n# Function to check prerequisites\ncheck_prerequisites() {\n    print_status \"Checking prerequisites...\"\n    \n    # Check Python\n    if ! command -v python3 &> /dev/null; then\n        print_error \"Python 3 is required but not installed\"\n        exit 1\n    fi\n    \n    # Check Java\n    if ! command -v java &> /dev/null; then\n        print_error \"Java is required but not installed\"\n        exit 1\n    fi\n    \n    # Check Node.js\n    if ! command -v node &> /dev/null; then\n        print_error \"Node.js is required but not installed\"\n        exit 1\n    fi\n    \n    print_success \"All prerequisites are installed\"\n}\n\n# Function to setup environment\nsetup_environment() {\n    print_status \"Setting up environment...\"\n    \n    # Create uploads directory\n    mkdir -p uploads/temp uploads/processed\n    \n    # Check if .env exists\n    if [ ! -f .env ]; then\n        if [ -f .env.example ]; then\n            print_warning \"No .env file found. Copying from .env.example\"\n            cp .env.example .env\n            print_warning \"Please edit .env file and set your DASHSCOPE_API_KEY\"\n        else\n            print_error \"No .env file found. Please create one with DASHSCOPE_API_KEY\"\n            exit 1\n        fi\n    fi\n    \n    # Source environment variables\n    if [ -f .env ]; then\n        export $(cat .env | grep -v '^#' | xargs)\n    fi\n    \n    # Check if DASHSCOPE_API_KEY is set\n    if [ -z \"$DASHSCOPE_API_KEY\" ] || [ \"$DASHSCOPE_API_KEY\" = \"your_dashscope_api_key_here\" ]; then\n        print_error \"DASHSCOPE_API_KEY is not properly configured in .env file\"\n        print_error \"Please set your actual DashScope API key for document analysis to work\"\n        exit 1\n    fi\n    \n    print_success \"Environment setup completed\"\n}\n\n# Function to install Python dependencies\ninstall_python_deps() {\n    print_status \"Installing Python dependencies...\"\n    \n    cd genie-client\n    \n    # Check if virtual environment exists\n    if [ ! -d \".venv\" ]; then\n        print_status \"Creating Python virtual environment...\"\n        python3 -m venv .venv\n    fi\n    \n    # Activate virtual environment\n    source .venv/bin/activate\n    \n    # Upgrade pip\n    pip install --upgrade pip\n    \n    # Install dependencies\n    if command -v uv &> /dev/null; then\n        print_status \"Using uv for fast dependency installation...\"\n        uv sync\n    else\n        print_status \"Installing dependencies with pip...\"\n        pip install -e .\n    fi\n    \n    cd ..\n    print_success \"Python dependencies installed\"\n}\n\n# Function to install Node.js dependencies\ninstall_node_deps() {\n    print_status \"Installing Node.js dependencies...\"\n    \n    cd ui\n    \n    if command -v pnpm &> /dev/null; then\n        print_status \"Using pnpm for fast installation...\"\n        pnpm install\n    elif command -v yarn &> /dev/null; then\n        print_status \"Using yarn...\"\n        yarn install\n    else\n        print_status \"Using npm...\"\n        npm install\n    fi\n    \n    cd ..\n    print_success \"Node.js dependencies installed\"\n}\n\n# Function to start document analysis service\nstart_document_service() {\n    print_status \"Starting document analysis service...\"\n    \n    cd genie-client\n    \n    # Check if port is already in use\n    if check_port 8188; then\n        print_warning \"Port 8188 is already in use. Skipping document service startup.\"\n        cd ..\n        return 0\n    fi\n    \n    # Start in background\n    source .venv/bin/activate\n    nohup python server.py > ../logs/document-service.log 2>&1 &\n    DOCUMENT_PID=$!\n    echo $DOCUMENT_PID > ../logs/document-service.pid\n    \n    cd ..\n    \n    # Wait for service to be ready\n    if wait_for_service \"http://localhost:8188/health\" \"Document Analysis Service\"; then\n        print_success \"Document analysis service started (PID: $DOCUMENT_PID)\"\n        return 0\n    else\n        print_error \"Failed to start document analysis service\"\n        return 1\n    fi\n}\n\n# Function to start Java backend\nstart_backend() {\n    print_status \"Starting Java backend...\"\n    \n    cd genie-backend\n    \n    # Check if port is already in use\n    if check_port 8080; then\n        print_warning \"Port 8080 is already in use. Skipping backend startup.\"\n        cd ..\n        return 0\n    fi\n    \n    # Make start script executable\n    chmod +x start.sh\n    \n    # Start backend\n    nohup ./start.sh > ../logs/backend.log 2>&1 &\n    BACKEND_PID=$!\n    echo $BACKEND_PID > ../logs/backend.pid\n    \n    cd ..\n    \n    # Wait for service to be ready\n    if wait_for_service \"http://localhost:8080/health\" \"Java Backend\"; then\n        print_success \"Java backend started (PID: $BACKEND_PID)\"\n        return 0\n    else\n        print_error \"Failed to start Java backend\"\n        return 1\n    fi\n}\n\n# Function to start frontend\nstart_frontend() {\n    print_status \"Starting React frontend...\"\n    \n    cd ui\n    \n    # Check if port is already in use\n    if check_port 3000; then\n        print_warning \"Port 3000 is already in use. Skipping frontend startup.\"\n        cd ..\n        return 0\n    fi\n    \n    # Start frontend\n    if command -v pnpm &> /dev/null; then\n        nohup pnpm run dev > ../logs/frontend.log 2>&1 &\n    elif command -v yarn &> /dev/null; then\n        nohup yarn dev > ../logs/frontend.log 2>&1 &\n    else\n        nohup npm run dev > ../logs/frontend.log 2>&1 &\n    fi\n    \n    FRONTEND_PID=$!\n    echo $FRONTEND_PID > ../logs/frontend.pid\n    \n    cd ..\n    \n    # Wait for service to be ready\n    if wait_for_service \"http://localhost:3000\" \"React Frontend\"; then\n        print_success \"React frontend started (PID: $FRONTEND_PID)\"\n        return 0\n    else\n        print_error \"Failed to start React frontend\"\n        return 1\n    fi\n}\n\n# Function to display status\nshow_status() {\n    echo \"\"\n    print_success \"üéâ JoyAgent with Document Analysis is now running!\"\n    echo \"\"\n    echo \"Services:\"\n    echo \"  üìä Document Analysis Service: http://localhost:8188\"\n    echo \"  üîß Java Backend:             http://localhost:8080\"\n    echo \"  üñ•Ô∏è  React Frontend:           http://localhost:3000\"\n    echo \"\"\n    echo \"Document Analysis Features:\"\n    echo \"  ‚Ä¢ Upload PDF, DOCX, TXT, CSV, JSON, MD files\"\n    echo \"  ‚Ä¢ AI-powered analysis with Qwen LLM\"\n    echo \"  ‚Ä¢ Financial, compliance, and risk analysis\"\n    echo \"  ‚Ä¢ Secure processing for banking environments\"\n    echo \"\"\n    echo \"Logs are available in the ./logs/ directory\"\n    echo \"To stop all services, run: ./stop_genie.sh\"\n    echo \"\"\n}\n\n# Main execution\nmain() {\n    print_status \"Starting JoyAgent with Document Analysis...\"\n    \n    # Create logs directory\n    mkdir -p logs\n    \n    # Check prerequisites\n    check_prerequisites\n    \n    # Setup environment\n    setup_environment\n    \n    # Install dependencies based on command line argument\n    if [ \"$1\" = \"--install-deps\" ] || [ \"$1\" = \"-i\" ]; then\n        install_python_deps\n        install_node_deps\n    fi\n    \n    # Start services\n    if start_document_service; then\n        sleep 2\n        if start_backend; then\n            sleep 2\n            if start_frontend; then\n                show_status\n            else\n                print_error \"Frontend startup failed\"\n                exit 1\n            fi\n        else\n            print_error \"Backend startup failed\"\n            exit 1\n        fi\n    else\n        print_error \"Document service startup failed\"\n        exit 1\n    fi\n}\n\n# Handle command line arguments\ncase \"$1\" in\n    --help|-h)\n        echo \"JoyAgent Startup Script\"\n        echo \"\"\n        echo \"Usage: $0 [OPTIONS]\"\n        echo \"\"\n        echo \"Options:\"\n        echo \"  --install-deps, -i    Install all dependencies before starting\"\n        echo \"  --help, -h           Show this help message\"\n        echo \"\"\n        echo \"Environment Variables:\"\n        echo \"  DASHSCOPE_API_KEY    Required for document analysis functionality\"\n        echo \"\"\n        exit 0\n        ;;\n    *)\n        main \"$1\"\n        ;;\nesac